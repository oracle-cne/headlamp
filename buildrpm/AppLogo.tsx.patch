diff --git frontend/src/components/App/AppLogo.tsx frontend/src/components/App/AppLogo.tsx
index 9566bba6..d4c77518 100644
--- frontend/src/components/App/AppLogo.tsx
+++ frontend/src/components/App/AppLogo.tsx
@@ -23,29 +23,36 @@ export interface AppLogoProps {
 }

 export type AppLogoType =
-  | React.ComponentType<AppLogoProps>
-  | ReactElement
-  | typeof React.Component
-  | null;
+    | React.ComponentType<AppLogoProps>
+    | ReactElement
+    | typeof React.Component
+    | null;

 export default function OriginalAppLogo(props: AppLogoProps) {
   const { sx, className, logoType, themeName } = props;

   return (
-    <SvgIcon
-      sx={sx}
-      className={className}
-      component={
-        logoType === 'large'
-          ? themeName === 'dark'
-            ? LogoWithTextLight
-            : LogoWithTextDark
-          : themeName === 'dark'
-          ? LogoLight
-          : LogoDark
-      }
-      viewBox="0 0 auto 32"
-    />
+      <SvgIcon
+          sx={{...sx, marginLeft: "-27px"}}
+          className={className}
+          component={
+            logoType === 'large'
+                ? themeName === 'dark'
+                    ? LogoWithTextLight
+                    : LogoWithTextDark
+                : themeName === 'dark'
+                    ? LogoLight
+                    : LogoDark
+          }
+          viewBox="0 0 243 66"
+          width="100%" height="100%"
+
+          // //viewBox="-557 0 2450 640"
+          // viewBox="-500 0 1772 680"
+          // //overflow="hidden"
+          // transform="scale(1.1, 1)"
+          // preserveAspectRatio="4:3"
+      />
   );
 }

@@ -59,26 +66,26 @@ export function AppLogo(props: AppLogoProps) {
   if (!arePluginsLoaded) {
     return <EmptyContent />;
   }
-
+//
   return PluginAppLogoComponent ? (
-    <ErrorBoundary>
-      {isValidElement(PluginAppLogoComponent) ? (
-        // If it's an element, just use it.
-        PluginAppLogoComponent
-      ) : (
-        // It is a component, so we make it here.
-        <PluginAppLogoComp
+      <ErrorBoundary>
+        {isValidElement(PluginAppLogoComponent) ? (
+            // If it's an element, just use it.
+            PluginAppLogoComponent
+        ) : (
+            // It is a component, so we make it here.
+            <PluginAppLogoComp
+                logoType={logoType}
+                themeName={themeName}
+                sx={{ height: '32px', width: 'auto' }}
+            />
+        )}
+      </ErrorBoundary>
+  ) : (
+      <OriginalAppLogo
           logoType={logoType}
           themeName={themeName}
-          sx={{ height: '32px', width: 'auto' }}
-        />
-      )}
-    </ErrorBoundary>
-  ) : (
-    <OriginalAppLogo
-      logoType={logoType}
-      themeName={themeName}
-      sx={{ height: '32px', width: 'auto' }}
-    />
+          sx={{ height: '66px', width: '243px'}}
+      />
   );
 }
